// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Site {
  id          String       @id @default(cuid())
  name        String?
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String?
  posts       Post[]
  collections Collection[]

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  twitterHandle String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  posts         Post[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  posts       Post[]
  site        Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id           String     @id @default(cuid())
  title        String
  status       Status
  description  String
  coverImage   String?
  content      String?
  authors      User[]
  slug         String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  tags         String[]
  site         Site?      @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId       String?
  publishedAt  DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([slug, siteId, collectionId])
  @@index([siteId])
}

model Views {
  slug      String   @id
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  DRAFT
  PUBLISHED
}
